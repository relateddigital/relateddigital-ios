Smile Rating için emoji kullanırsak android ile aynı görüntüyü elde edebiliriz.

https://codepen.io/gustavoquinalha/pen/gZBpxd
https://github.com/ubc/emoji-feedback
https://github.com/YanNerio/emotion-ratings


html ile animasyonlu bir şey de yapabiliriz.


bütün pop-up tipleri html'e çevirilebilir böylece android ve ios aynı gözükür (ONESIGNAL)


    html = "<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n<style>\n    * {\n        -webkit-touch-callout: none;\n        -webkit-user-select: none; /* Disable selection/copy in UIWebView */\n    }\n\n    h1 {\n        font-weight: 400;\n    }\n\n    body {\n        font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;\n        overflow: hidden;\n        cursor: pointer;\n        padding: 16px;background-color: #FFFFFF;\n        \n    }\n\n    .flex-container {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n    }\n\n    /* top level elements */\n    .flex-container > * {\n        margin-top: 8px;\n        margin-bottom: 8px;\n    }\n\n    /* Image only for Fullscreen and Modal */\n    .image-container {\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n    }\n</style>\n<script>\n    var iamInfo = {\n        location: \"center_modal\",\n        afterLoadCallbacks: [],\n        allowClicks: true,\n        shouldVerticalDragDismissMessage: true,\n    };\n    var bodyAction = {}\n</script>\n\n\n    <script>\n        bodyAction = {\"close\":false,\"url_target\":\"browser\",\"id\":\"1ef02a4a-0570-4d93-84fa-bc556b4cf637\"}\n    </script>\n\n\n\n\n<script>\n    // Image src values and action urls are now encoded. \n    // Decode the value in DOMContentLoaded before resources are retrieved\n    function decodeURLs() {\n        var images = document.getElementsByClassName(\"iam-image\");\n        for (var i = 0, n = images.length; i < n; i++) {\n            var imgElement = images[i];\n            var src = imgElement.getAttribute(\"src\");\n            imgElement.setAttribute(\"src\", decodeURIComponent(src.replace(/\\+/g, '%20')));\n        } \n\n        // Click Action URLs are now url encoded. Decode them and save to data-action-payload\n        var pageClickables = document.getElementsByClassName(\"iam-action-templatable\");\n        for (var i = 0, n = pageClickables.length; i < n; i++) {\n            var el = pageClickables[i];\n            var attributes = getAttributes(el);\n            if (attributes[\"data-action-payload\"]) {\n                var dataActionPayload = attributes[\"data-action-payload\"]\n                var decodedActionPayload = decodeURIComponent(dataActionPayload.replace(/\\+/g, '%20'));\n                el.setAttribute(\"data-action-payload\", decodedActionPayload);\n            }\n        }\n    }\n</script>\n\n\n<script>\n    document.addEventListener(\"DOMContentLoaded\", decodeURLs);\n</script>\n\n\n<script>\n    // Called from onClick of images, buttons, and dismiss button\n    function actionTaken(data, clickType) {\n        console.log(\"actionTaken(): \" + JSON.stringify(data));\n        if (clickType)\n            data[\"click_type\"] = clickType;\n        postMessageToNative({ type: \"action_taken\", body: data });\n    }\n\n    function postMessageToNative(msgJson) {\n        console.log(\"postMessageToNative(): \" + JSON.stringify(msgJson));\n        var encodedMsg = JSON.stringify(msgJson);\n        postMessageToIos(encodedMsg);\n        postMessageToAndroid(encodedMsg);\n        postMessageToDashboard(encodedMsg);\n    }\n\n    function postMessageToIos(encodedMsg) {\n        // See iOS SDK Source\n        //    userContentController:didReceiveScriptMessage:\n        if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iosListener)\n            window.webkit.messageHandlers.iosListener.postMessage(encodedMsg);\n    }\n\n    function postMessageToAndroid(encodedMsg) {\n        if (window.OSAndroid)\n            window.OSAndroid.postMessage(encodedMsg);\n    }\n\n    function postMessageToDashboard(encodedMsg) {\n        if (window.parent) {\n            window.parent.postMessage(encodedMsg, \"*\");\n        }\n    }\n\n    // last-element needed to give the correct height for modals and banners\n    function getPageMetaData() {\n        var lastElement = document.getElementById(\"last-element\");\n        if (!lastElement)\n            return {};\n\n        var outerContentContainer = document.querySelector(\".outer-content-container\");\n        if (!outerContentContainer) {\n            console.error(\"Could not find outer-content-container class required to resize modal correctly!\");\n            return {};\n        }\n\n        // rect.y will be undefined on Android 4.4\n        var outerContentContainerRect = outerContentContainer.getBoundingClientRect();\n        return {\n            rect: {\n                height: lastElement.getBoundingClientRect().top + outerContentContainerRect.top\n            },\n            outerContentContainerRect: toJsonObject(outerContentContainerRect)\n        };\n    }\n\n    function toJsonObject(value) {\n        return JSON.parse(JSON.stringify(value));\n    }\n\n    function getAttributes(element) {\n        var attributes = {};\n        if (element.hasAttributes()) {\n            for (var i = 0, n = element.attributes.length; i < n; i++) {\n                var attr = element.attributes[i];\n                attributes[attr.name] = attr.value;\n            }\n        }\n        return attributes;\n    }\n\n    // TODO: Remove after we have verified we are not seeing any mis touches.\n    // Just a quick and dirty way to see where you have tapped by moving the close button to where you tapped.\n    function debugTaps() {\n        document.body.addEventListener('click', function(e) {\n            console.log(\"body onlick:\" + JSON.stringify({x: e.pageX, y: e.pageY}));\n            document.querySelector(\".close-button\").style.display = \"block\";\n            document.querySelector(\".close-button\").style.right = 0;\n            document.querySelector(\".close-button\").style.left = e.pageX;\n            document.querySelector(\".close-button\").style.top = e.pageY;\n        }, true);\n    }\n\n    function standardBodyClick(e) {\n        e.stopPropagation();\n\n        if (iamInfo.allowClicks) {\n            \n                actionTaken(bodyAction, \"body\");\n            \n        }\n    }\n\n    window.onresize = function() {\n        postMessageToNative({\n            type: \"resize\",\n            pageMetaData: getPageMetaData(),\n            displayLocation: iamInfo.location\n        });\n    };\n\n    // Lets the SDK know the page is done loading as well as its display type and location\n    window.onload = function() {\n        // 1. Inform native code \"render_complete\" event fired\n        postMessageToNative({\n            type: \"rendering_complete\",\n            pageMetaData: getPageMetaData(),\n            displayLocation: iamInfo.location,\n            dragToDismissDisabled: !iamInfo.shouldVerticalDragDismissMessage,\n        });\n\n        // 2. Setup all action events for button clicks (body, button, image, & close)\n        // Body clicks\n        \n            document.addEventListener(\"click\", standardBodyClick, false);\n        \n\n        // Close button clicks\n        var closeButton = document.querySelector(\".close-button\");\n        closeButton && closeButton.addEventListener(\"click\", function(e) {\n            if (iamInfo.allowClicks) {\n                actionTaken({close: true});\n                e.stopPropagation();\n            }\n        }, true);\n\n        // Image and Button clicks\n        var clickable = document.getElementsByClassName(\"iam-clickable\");\n        for (var i = 0, n = clickable.length; i < n; i++) {\n            var el = clickable[i];\n            var attributes = getAttributes(el);\n            if (attributes[\"data-action-payload\"]) {\n                // use iife to close over the right element and value\n                (function(element, value, label) {\n                    element.addEventListener(\"click\", function(e) {\n                        if (iamInfo.allowClicks) {\n                            actionTaken(value, label);\n                            e.stopPropagation();\n                        }\n                    }, true);\n                })(el, JSON.parse(attributes[\"data-action-payload\"]), attributes[\"data-action-label\"]);\n            }\n        }\n\n        for (var i = 0, n = iamInfo.afterLoadCallbacks.length; i < n; i++) {\n           iamInfo.afterLoadCallbacks[i]();\n        }\n    };\n</script>\n<style>.close-button {\n    right: -8px;\n    top: -8px;\n    width: 48px;\n    height: 48px;\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    z-index: 2;\n}#text-2aca9307-d5a1-432c-b388-6cafe75cab62 {\n  color: #222;\n  font-size: 24;\n  margin: 0;\n  text-align: center;\n}\n#img-bg-div-d005eaad-2b0d-47f0-b312-90ff994caee8 {\n    flex-shrink: 9999; /* Chrome 30 bug workaround to shrink down to min-height when needed */\n    min-height: 10px;\n\n    background-size: contain;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-image: url(\"https://media.onesignal.com/iam/default_image_20200320.png\");\n}\n\n#img-invisible-d005eaad-2b0d-47f0-b312-90ff994caee8 {\n    width: 100%;\n    min-height: 10px; /* Keep img from growing outside of parent div. */\n    opacity: 0; /* Invisible - Only using as source for height. */\n}\n#button-04197084-8557-4971-bfa1-bc253a27c737 {\n  font-size: 24;\n  color: #FFF;\n  background-color: #1f8feb;\n  text-align: center;\n  width: 100%;\n  padding: 12px;\n  border-width: 0;\n  border-radius: 4px;\n}\n#cdb0c88b-8141-44e7-a06a-8ade10f5fcff {\n  font-size: 18px;\n  color: #999;\n  margin-top: 0px;\n  text-align: center;\n}\n\n    </style>\n</head>\n<body>\n    <div class=\"outer-content-container\"><div class=\"close-button\">\n    <svg width=\"10\" height=\"10\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M7.80309 1.14768C8.06564 0.885137 8.06564 0.459453 7.80309 0.196909C7.54055 -0.0656362 7.11486 -0.0656362 6.85232 0.196909L4 3.04923L1.14768 0.196909C0.885137 -0.0656362 0.459453 -0.0656362 0.196909 0.196909C-0.0656362 0.459453 -0.0656362 0.885137 0.196909 1.14768L3.04923 4L0.196909 6.85232C-0.0656362 7.11486 -0.0656362 7.54055 0.196909 7.80309C0.459453 8.06564 0.885137 8.06564 1.14768 7.80309L4 4.95077L6.85232 7.80309C7.11486 8.06564 7.54055 8.06564 7.80309 7.80309C8.06564 7.54055 8.06564 7.11486 7.80309 6.85232L4.95077 4L7.80309 1.14768Z\" fill=\"#111111\"/>\n    </svg>\n</div>\n<div class=\"flex-container\">\n            <div class=\"title-container iam-templatable\">\n    <h1 id=\"text-2aca9307-d5a1-432c-b388-6cafe75cab62\">Ba\U015fl\U0131k</h1>\n</div>\n\n<div id=\"img-bg-div-d005eaad-2b0d-47f0-b312-90ff994caee8\" class=\"image-container\">\n    <img\n        id=\"img-invisible-d005eaad-2b0d-47f0-b312-90ff994caee8\"\n        class=\"iam-image iam-clickable iam-action-templatable\"\n        src=\"https%3A%2F%2Fmedia.onesignal.com%2Fiam%2Fdefault_image_20200320.png\"\n        alt=\"main image\"\n        data-action-payload='%7B%22close%22%3Afalse%2C%22url_target%22%3A%22browser%22%2C%22id%22%3A%226f0c5dd3-c339-49bc-9547-43f13d6f4986%22%7D'\n        data-action-label=\"image\"\n        draggable=\"false\"\n    >\n</div>\n<div class=\"button-container\">\n  <button type=\"button\" id=\"button-04197084-8557-4971-bfa1-bc253a27c737\" class=\"iam-button iam-clickable iam-templatable iam-action-templatable\" data-action-payload='%7B%22close%22%3Atrue%2C%22url_target%22%3A%22browser%22%2C%22id%22%3A%227629d746-00d6-49bd-9b77-0a8b14040656%22%7D' data-action-label=\"button\">Click Me</button>\n</div>\n\n\n            <!-- Used to find the height of the content so the SDK can set the correct view port height. -->\n            <div id=\"last-element\" />\n        </div>\n    </div>\n</body>\n</html>\n";
}
2021-07-12 20:08:18.190043+0300 OneSignalExample[676:77795] VERBOSE: In App Messaging htmlContent.html: (null)
2021-07-12 20:08:18.190288+0300 OneSignalExample[676:77795] DEBUG: OneSignal SessionManager onInAppMessageReceived messageId: fc66fbd6-8060-4d3a-8f92-eff7ca46bb00
2021-07-12 20:08:18.197219+0300 OneSignalExample[676:77795] DEBUG: OSChannelTracker for: iam_id saveLastId id: fc66fbd6-8060-4d3a-8f92-eff7ca46bb00
2021-07-12 20:08:18.199230+0300 OneSignalExample[676:77795] DEBUG: OSChannelTracker for: iam_id saveLastId with lastChannelObjectReceived: (
)
2021-07-12 20:08:18.199619+0300 OneSignalExample[676:77795] DEBUG: OSChannelTracker for: iam_id with channelObjectToSave: (
    "OSIndirectInfluence channelIdTag: iam_id Id: fc66fbd6-8060-4d3a-8f92-eff7ca46bb00 Timestamp: 1626109698.199359"
)
2021-07-12 20:08:18.207581+0300 OneSignalExample[676:77795] 11111 [self.webView loadHTMLString:html baseURL:url];
2021-07-12 20:08:18.207771+0300 OneSignalExample[676:77624] 222222 [self.webView loadHTMLString:html baseURL:url];
2021-07-12 20:08:18.208046+0300 OneSignalExample[676:77624] taggedHTML
2021-07-12 20:08:18.208288+0300 OneSignalExample[676:77624] <html>
<head><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
<style>
    * {
        -webkit-touch-callout: none;
        -webkit-user-select: none; /* Disable selection/copy in UIWebView */
    }

    h1 {
        font-weight: 400;
    }

    body {
        font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
        overflow: hidden;
        cursor: pointer;
        padding: 16px;background-color: #FFFFFF;
        
    }

    .flex-container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    /* top level elements */
    .flex-container > * {
        margin-top: 8px;
        margin-bottom: 8px;
    }

    /* Image only for Fullscreen and Modal */
    .image-container {
        display: flex;
        justify-content: center;
        flex-direction: column;
    }
</style>
<script>
    var iamInfo = {
        location: "center_modal",
        afterLoadCallbacks: [],
        allowClicks: true,
        shouldVerticalDragDismissMessage: true,
    };
    var bodyAction = {}
</script>


    <script>
        bodyAction = {"close":false,"url_target":"browser","id":"1ef02a4a-0570-4d93-84fa-bc556b4cf637"}
    </script>




<script>
    // Image src values and action urls are now encoded.
    // Decode the value in DOMContentLoaded before resources are retrieved
    function decodeURLs() {
        var images = document.getElementsByClassName("iam-image");
        for (var i = 0, n = images.length; i < n; i++) {
            var imgElement = images[i];
            var src = imgElement.getAttribute("src");
            imgElement.setAttribute("src", decodeURIComponent(src.replace(/\+/g, '%20')));
        }

        // Click Action URLs are now url encoded. Decode them and save to data-action-payload
        var pageClickables = document.getElementsByClassName("iam-action-templatable");
        for (var i = 0, n = pageClickables.length; i < n; i++) {
            var el = pageClickables[i];
            var attributes = getAttributes(el);
            if (attributes["data-action-payload"]) {
                var dataActionPayload = attributes["data-action-payload"]
                var decodedActionPayload = decodeURIComponent(dataActionPayload.replace(/\+/g, '%20'));
                el.setAttribute("data-action-payload", decodedActionPayload);
            }
        }
    }
</script>


<script>
    document.addEventListener("DOMContentLoaded", decodeURLs);
</script>


<script>
    // Called from onClick of images, buttons, and dismiss button
    function actionTaken(data, clickType) {
        console.log("actionTaken(): " + JSON.stringify(data));
        if (clickType)
            data["click_type"] = clickType;
        postMessageToNative({ type: "action_taken", body: data });
    }

    function postMessageToNative(msgJson) {
        console.log("postMessageToNative(): " + JSON.stringify(msgJson));
        var encodedMsg = JSON.stringify(msgJson);
        postMessageToIos(encodedMsg);
        postMessageToAndroid(encodedMsg);
        postMessageToDashboard(encodedMsg);
    }

    function postMessageToIos(encodedMsg) {
        // See iOS SDK Source
        //    userContentController:didReceiveScriptMessage:
        if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iosListener)
            window.webkit.messageHandlers.iosListener.postMessage(encodedMsg);
    }

    function postMessageToAndroid(encodedMsg) {
        if (window.OSAndroid)
            window.OSAndroid.postMessage(encodedMsg);
    }

    function postMessageToDashboard(encodedMsg) {
        if (window.parent) {
            window.parent.postMessage(encodedMsg, "*");
        }
    }

    // last-element needed to give the correct height for modals and banners
    function getPageMetaData() {
        var lastElement = document.getElementById("last-element");
        if (!lastElement)
            return {};

        var outerContentContainer = document.querySelector(".outer-content-container");
        if (!outerContentContainer) {
            console.error("Could not find outer-content-container class required to resize modal correctly!");
            return {};
        }

        // rect.y will be undefined on Android 4.4
        var outerContentContainerRect = outerContentContainer.getBoundingClientRect();
        return {
            rect: {
                height: lastElement.getBoundingClientRect().top + outerContentContainerRect.top
            },
            outerContentContainerRect: toJsonObject(outerContentContainerRect)
        };
    }

    function toJsonObject(value) {
        return JSON.parse(JSON.stringify(value));
    }

    function getAttributes(element) {
        var attributes = {};
        if (element.hasAttributes()) {
            for (var i = 0, n = element.attributes.length; i < n; i++) {
                var attr = element.attributes[i];
                attributes[attr.name] = attr.value;
            }
        }
        return attributes;
    }

    // TODO: Remove after we have verified we are not seeing any mis touches.
    // Just a quick and dirty way to see where you have tapped by moving the close button to where you tapped.
    function debugTaps() {
        document.body.addEventListener('click', function(e) {
            console.log("body onlick:" + JSON.stringify({x: e.pageX, y: e.pageY}));
            document.querySelector(".close-button").style.display = "block";
            document.querySelector(".close-button").style.right = 0;
            document.querySelector(".close-button").style.left = e.pageX;
            document.querySelector(".close-button").style.top = e.pageY;
        }, true);
    }

    function standardBodyClick(e) {
        e.stopPropagation();

        if (iamInfo.allowClicks) {
            
                actionTaken(bodyAction, "body");
            
        }
    }

    window.onresize = function() {
        postMessageToNative({
            type: "resize",
            pageMetaData: getPageMetaData(),
            displayLocation: iamInfo.location
        });
    };

    // Lets the SDK know the page is done loading as well as its display type and location
    window.onload = function() {
        // 1. Inform native code "render_complete" event fired
        postMessageToNative({
            type: "rendering_complete",
            pageMetaData: getPageMetaData(),
            displayLocation: iamInfo.location,
            dragToDismissDisabled: !iamInfo.shouldVerticalDragDismissMessage,
        });

        // 2. Setup all action events for button clicks (body, button, image, & close)
        // Body clicks
        
            document.addEventListener("click", standardBodyClick, false);
        

        // Close button clicks
        var closeButton = document.querySelector(".close-button");
        closeButton && closeButton.addEventListener("click", function(e) {
            if (iamInfo.allowClicks) {
                actionTaken({close: true});
                e.stopPropagation();
            }
        }, true);

        // Image and Button clicks
        var clickable = document.getElementsByClassName("iam-clickable");
        for (var i = 0, n = clickable.length; i < n; i++) {
            var el = clickable[i];
            var attributes = getAttributes(el);
            if (attributes["data-action-payload"]) {
                // use iife to close over the right element and value
                (function(element, value, label) {
                    element.addEventListener("click", function(e) {
                        if (iamInfo.allowClicks) {
                            actionTaken(value, label);
                            e.stopPropagation();
                        }
                    }, true);
                })(el, JSON.parse(attributes["data-action-payload"]), attributes["data-action-label"]);
            }
        }

        for (var i = 0, n = iamInfo.afterLoadCallbacks.length; i < n; i++) {
           iamInfo.afterLoadCallbacks[i]();
        }
    };
</script>
<style>.close-button {
    right: -8px;
    top: -8px;
    width: 48px;
    height: 48px;
    position: absolute;
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    z-index: 2;
}#text-2aca9307-d5a1-432c-b388-6cafe75cab62 {
  color: #222;
  font-size: 24;
  margin: 0;
  text-align: center;
}
#img-bg-div-d005eaad-2b0d-47f0-b312-90ff994caee8 {
    flex-shrink: 9999; /* Chrome 30 bug workaround to shrink down to min-height when needed */
    min-height: 10px;

    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    background-image: url("https://media.onesignal.com/iam/default_image_20200320.png");
}

#img-invisible-d005eaad-2b0d-47f0-b312-90ff994caee8 {
    width: 100%;
    min-height: 10px; /* Keep img from growing outside of parent div. */
    opacity: 0; /* Invisible - Only using as source for height. */
}
#button-04197084-8557-4971-bfa1-bc253a27c737 {
  font-size: 24;
  color: #FFF;
  background-color: #1f8feb;
  text-align: center;
  width: 100%;
  padding: 12px;
  border-width: 0;
  border-radius: 4px;
}
#cdb0c88b-8141-44e7-a06a-8ade10f5fcff {
  font-size: 18px;
  color: #999;
  margin-top: 0px;
  text-align: center;
}

    </style>
</head>
<body>
    <div class="outer-content-container"><div class="close-button">
    <svg width="10" height="10" viewBox="0 0 8 8" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M7.80309 1.14768C8.06564 0.885137 8.06564 0.459453 7.80309 0.196909C7.54055 -0.0656362 7.11486 -0.0656362 6.85232 0.196909L4 3.04923L1.14768 0.196909C0.885137 -0.0656362 0.459453 -0.0656362 0.196909 0.196909C-0.0656362 0.459453 -0.0656362 0.885137 0.196909 1.14768L3.04923 4L0.196909 6.85232C-0.0656362 7.11486 -0.0656362 7.54055 0.196909 7.80309C0.459453 8.06564 0.885137 8.06564 1.14768 7.80309L4 4.95077L6.85232 7.80309C7.11486 8.06564 7.54055 8.06564 7.80309 7.80309C8.06564 7.54055 8.06564 7.11486 7.80309 6.85232L4.95077 4L7.80309 1.14768Z" fill="#111111"/>
    </svg>
</div>
<div class="flex-container">
            <div class="title-container iam-templatable">
    <h1 id="text-2aca9307-d5a1-432c-b388-6cafe75cab62">Başlık</h1>
</div>

<div id="img-bg-div-d005eaad-2b0d-47f0-b312-90ff994caee8" class="image-container">
    <img
        id="img-invisible-d005eaad-2b0d-47f0-b312-90ff994caee8"
        class="iam-image iam-clickable iam-action-templatable"
        src="https%3A%2F%2Fmedia.onesignal.com%2Fiam%2Fdefault_image_20200320.png"
        alt="main image"
        data-action-payload='%7B%22close%22%3Afalse%2C%22url_target%22%3A%22browser%22%2C%22id%22%3A%226f0c5dd3-c339-49bc-9547-43f13d6f4986%22%7D'
        data-action-label="image"
        draggable="false"
    >
</div>
<div class="button-container">
  <button type="button" id="button-04197084-8557-4971-bfa1-bc253a27c737" class="iam-button iam-clickable iam-templatable iam-action-templatable" data-action-payload='%7B%22close%22%3Atrue%2C%22url_target%22%3A%22browser%22%2C%22id%22%3A%227629d746-00d6-49bd-9b77-0a8b14040656%22%7D' data-action-label="button">Click Me</button>
</div>


            <!-- Used to find the height of the content so the SDK can set the correct view port height. -->
            <div id="last-element" />
        </div>
    </div>
</body>
</html>
 

                         <script>                             setPlayerTags({
  "key1" : "value1"
});                         </script>

